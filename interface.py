#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.0
#  in conjunction with Tcl version 8.6
#    Dec 12, 2020 05:11:51 PM CET  platform: Linux

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import interface_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    interface_support.set_Tk_var()
    top = Toplevel (root)
    interface_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    interface_support.set_Tk_var()
    top = Toplevel (w)
    interface_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel():
    global w
    w.destroy()
    w = None

class Toplevel:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1148x441+375+338")
        top.minsize(1, 1)
        top.maxsize(1905, 1050)
        top.resizable(1,  1)
        top.title("dpm-qr-edit")
        top.configure(highlightcolor="black")

        self.DanpaCanvas = tk.Canvas(top)
        self.DanpaCanvas.place(relx=0.279, rely=0.152, relheight=0.798
                , relwidth=0.228)
        self.DanpaCanvas.configure(borderwidth="2")
        self.DanpaCanvas.configure(relief="ridge")
        self.DanpaCanvas.configure(selectbackground="blue")
        self.DanpaCanvas.configure(selectforeground="white")

        self.QRCanvas = tk.Canvas(top)
        self.QRCanvas.place(relx=0.514, rely=0.249, relheight=0.649
                , relwidth=0.253)
        self.QRCanvas.configure(borderwidth="2")
        self.QRCanvas.configure(relief="ridge")
        self.QRCanvas.configure(selectbackground="blue")
        self.QRCanvas.configure(selectforeground="white")

        self.NameEntry = tk.Entry(top)
        self.NameEntry.place(relx=0.314, rely=0.086, height=23, relwidth=0.136)
        self.NameEntry.configure(background="white")
        self.NameEntry.configure(font="TkFixedFont")
        self.NameEntry.configure(selectbackground="blue")
        self.NameEntry.configure(selectforeground="white")

        self.NameLabel = tk.Label(top)
        self.NameLabel.place(relx=0.269, rely=0.086, height=29, width=49)
        self.NameLabel.configure(activebackground="#f9f9f9")
        self.NameLabel.configure(text='''Name''')

        self.FaceSelect = ttk.Combobox(top)
        self.FaceSelect.place(relx=0.087, rely=0.408, relheight=0.048
                , relwidth=0.155)
        self.FaceSelect.configure(textvariable=interface_support.combobox)
        self.FaceSelect.configure(takefocus="")

        self.HeadSelect = ttk.Combobox(top)
        self.HeadSelect.place(relx=0.087, rely=0.295, relheight=0.05
                , relwidth=0.155)
        self.HeadSelect.configure(textvariable=interface_support.combobox)
        self.HeadSelect.configure(takefocus="")

        self.AntennaSelect = ttk.Combobox(top)
        self.AntennaSelect.place(relx=0.087, rely=0.172, relheight=0.048
                , relwidth=0.157)
        #antennae
        self.AntennaPower = [
            'no_antenna',
            'recover_single',
            'revive_single',
            'cure_poison',
            'cure_burn',
            'cure_paralysis',
            'cure_frozen',
            'attack_fire_single',
            'attack_water_single',
            'attack_ice_single',
            'attack_earth_single',
            'attack_wind_single',
            'attack_light_single',
            'recover_all',
            'revive_all',
            'bonus_always_treasure',
            'bonus_double_gold',
            'buff_invincible',
            'debuff_fatal',
            'attack_fire_all',
            'attack_water_all',
            'attack_ice_all',
            'attack_earth_all',
            'attack_wind_all',
            'attack_light_all',
            'cure_sleep',
            'cure_blind',
            'buff_excitement',
            'buff_attack_all',
            'buff_defense_all',
            'buff_speed_all',
            'debuff_attack_all',
            'buff_evasion_all',
            'debuff_defense_all',
            'debuff_speed_all',
            'buff_attack_single',
            'buff_defense_single',
            'buff_speed_single',
            'buff_evasion_single',
            'debuff_poison',
            'debuff_sleep',
            'debuff_paralysis',
            'debuff_blind',
            'debuff_attack_single',
            'debuff_defense_single',
            'debuff_speed_single',
            ]
        self.AntennaSelect.configure(values=self.AntennaPower)
        self.AntennaSelect.configure(textvariable=interface_support.antenna)
        self.AntennaSelect.configure(takefocus="")

        #regions
        self.denpa_type = [
            'not_valid',
            'north_america',
            'japan',
            'europe',
            'forced_decode',
            ]

        self.RegionSelect = ttk.Combobox(top)
        self.RegionSelect.place(relx=0.531, rely=0.181, relheight=0.045
                , relwidth=0.084)
        self.RegionSelect.configure(values=self.denpa_type)
        self.RegionSelect.configure(textvariable=interface_support.combobox)
        self.RegionSelect.configure(takefocus="")

        self.RegionLabel = tk.Label(top)
        self.RegionLabel.place(relx=0.54, rely=0.136, height=20, width=48)
        self.RegionLabel.configure(activebackground="#f9f9f9")
        self.RegionLabel.configure(text='''Region''')

        self.GlassesSelect = ttk.Combobox(top)
        self.GlassesSelect.place(relx=0.801, rely=0.181, relheight=0.048
                , relwidth=0.154)
        self.GlassesSelect.configure(textvariable=interface_support.combobox)
        self.GlassesSelect.configure(takefocus="")

        self.EyeSelect = ttk.Combobox(top)
        self.EyeSelect.place(relx=0.801, rely=0.317, relheight=0.048
                , relwidth=0.154)
        self.EyeSelect.configure(textvariable=interface_support.combobox)
        self.EyeSelect.configure(takefocus="")

        self.SkinSelect = ttk.Combobox(top)
        self.SkinSelect.place(relx=0.801, rely=0.431, relheight=0.048
                , relwidth=0.154)
        self.SkinSelect.configure(textvariable=interface_support.combobox)
        self.SkinSelect.configure(takefocus="")

        self.ColorSelect = ttk.Combobox(top)
        self.ColorSelect.place(relx=0.801, rely=0.68, relheight=0.048
                , relwidth=0.154)
        self.ColorSelect.configure(textvariable=interface_support.combobox)
        self.ColorSelect.configure(takefocus="")

        self.MouthSelect = ttk.Combobox(top)
        self.MouthSelect.place(relx=0.801, rely=0.794, relheight=0.048
                , relwidth=0.154)
        self.MouthSelect.configure(textvariable=interface_support.combobox)
        self.MouthSelect.configure(takefocus="")

        self.DyeSelect = ttk.Combobox(top)
        self.DyeSelect.place(relx=0.801, rely=0.544, relheight=0.048
                , relwidth=0.154)
        self.DyeSelect.configure(textvariable=interface_support.combobox)
        self.DyeSelect.configure(takefocus="")

        self.CheekSelect = ttk.Combobox(top)
        self.CheekSelect.place(relx=0.087, rely=0.544, relheight=0.048
                , relwidth=0.154)
        self.CheekSelect.configure(textvariable=interface_support.combobox)
        self.CheekSelect.configure(takefocus="")

        self.HairSelect = ttk.Combobox(top)
        self.HairSelect.place(relx=0.087, rely=0.68, relheight=0.048
                , relwidth=0.154)
        self.HairSelect.configure(textvariable=interface_support.combobox)
        self.HairSelect.configure(takefocus="")

        self.NoseSelect = ttk.Combobox(top)
        self.NoseSelect.place(relx=0.087, rely=0.794, relheight=0.048
                , relwidth=0.154)
        self.NoseSelect.configure(textvariable=interface_support.combobox)
        self.NoseSelect.configure(takefocus="")

        self.ScanButton = ttk.Button(top)
        self.ScanButton.place(relx=0.026, rely=0.023, height=28, width=132)
        self.ScanButton.configure(takefocus="")
        self.ScanButton.configure(text='''Scan from Camera''')

        self.IDButton = tk.Button(top)
        self.IDButton.place(relx=0.697, rely=0.181, height=31, width=81)
        self.IDButton.configure(activebackground="#f9f9f9")
        self.IDButton.configure(text='''Change ID''')

        self.GameSelect = ttk.Combobox(top)
        self.GameSelect.place(relx=0.871, rely=0.045, relheight=0.048
                , relwidth=0.111)
        self.GameSelect.configure(textvariable=interface_support.combobox)
        self.GameSelect.configure(takefocus="")

        self.GameLabel = tk.Label(top)
        self.GameLabel.place(relx=0.749, rely=0.045, height=21, width=132)
        self.GameLabel.configure(activebackground="#f9f9f9")
        self.GameLabel.configure(text='''This QR Code is for''')

        self.IDLabel = tk.Label(top)
        self.IDLabel.place(relx=0.531, rely=0.907, height=21, width=22)
        self.IDLabel.configure(activebackground="#f9f9f9")
        self.IDLabel.configure(text='''ID:''')

        self.IDText = tk.Text(top)
        self.IDText.place(relx=0.557, rely=0.907, relheight=0.054
                , relwidth=0.092)
        self.IDText.configure(background="white")
        self.IDText.configure(font="TkTextFont")
        self.IDText.configure(selectbackground="blue")
        self.IDText.configure(selectforeground="white")
        self.IDText.configure(wrap="word")

        self.AntennaLabel = tk.Label(top)
        self.AntennaLabel.place(relx=0.087, rely=0.136, height=11, width=58)
        self.AntennaLabel.configure(activebackground="#f9f9f9")
        self.AntennaLabel.configure(text='''Antenna''')

        self.HeadLabel = tk.Label(top)
        self.HeadLabel.place(relx=0.087, rely=0.249, height=21, width=82)
        self.HeadLabel.configure(activebackground="#f9f9f9")
        self.HeadLabel.configure(text='''Head Shape''')

        self.FaceShape = tk.Label(top)
        self.FaceShape.place(relx=0.087, rely=0.363, height=21, width=106)
        self.FaceShape.configure(activebackground="#f9f9f9")
        self.FaceShape.configure(text='''Facial Structure''')

        self.CheekLabel = tk.Label(top)
        self.CheekLabel.place(relx=0.087, rely=0.499, height=21, width=92)
        self.CheekLabel.configure(activebackground="#f9f9f9")
        self.CheekLabel.configure(text='''Cheek Decals''')

        self.HairLabel = tk.Label(top)
        self.HairLabel.place(relx=0.087, rely=0.635, height=21, width=51)
        self.HairLabel.configure(activebackground="#f9f9f9")
        self.HairLabel.configure(text='''Haircut''')

        self.NoseLabel = tk.Label(top)
        self.NoseLabel.place(relx=0.087, rely=0.748, height=21, width=37)
        self.NoseLabel.configure(activebackground="#f9f9f9")
        self.NoseLabel.configure(text='''Nose''')

        self.AttrSpinbox = tk.Spinbox(top, from_=1.0, to=100.0)
        self.AttrSpinbox.place(relx=0.157, rely=0.884, relheight=0.052
                , relwidth=0.077)
        self.AttrSpinbox.configure(activebackground="#f9f9f9")
        self.AttrSpinbox.configure(background="white")
        self.AttrSpinbox.configure(font="TkDefaultFont")
        self.AttrSpinbox.configure(highlightbackground="black")
        self.AttrSpinbox.configure(selectbackground="blue")
        self.AttrSpinbox.configure(selectforeground="white")
        self.AttrSpinbox.configure(textvariable=interface_support.spinbox)

        self.AttrLabel = tk.Label(top)
        self.AttrLabel.place(relx=0.087, rely=0.884, height=21, width=68)
        self.AttrLabel.configure(activebackground="#f9f9f9")
        self.AttrLabel.configure(text='''Attributes''')

        self.GlassesLabel = tk.Label(top)
        self.GlassesLabel.place(relx=0.801, rely=0.136, height=21, width=55)
        self.GlassesLabel.configure(activebackground="#f9f9f9")
        self.GlassesLabel.configure(text='''Glasses''')

        self.EyesLabel = tk.Label(top)
        self.EyesLabel.place(relx=0.801, rely=0.272, height=21, width=64)
        self.EyesLabel.configure(activebackground="#f9f9f9")
        self.EyesLabel.configure(text='''Eye Type''')

        self.SkinLabel = tk.Label(top)
        self.SkinLabel.place(relx=0.801, rely=0.385, height=21, width=68)
        self.SkinLabel.configure(activebackground="#f9f9f9")
        self.SkinLabel.configure(text='''Skin Tone''')

        self.DyeLabel = tk.Label(top)
        self.DyeLabel.place(relx=0.801, rely=0.499, height=21, width=61)
        self.DyeLabel.configure(activebackground="#f9f9f9")
        self.DyeLabel.configure(text='''Hair Dye''')

        self.ColorLabel = tk.Label(top)
        self.ColorLabel.place(relx=0.801, rely=0.635, height=21, width=75)
        self.ColorLabel.configure(activebackground="#f9f9f9")
        self.ColorLabel.configure(text='''Body Color''')

        self.MouthLabel = tk.Label(top)
        self.MouthLabel.place(relx=0.801, rely=0.748, height=21, width=45)
        self.MouthLabel.configure(activebackground="#f9f9f9")
        self.MouthLabel.configure(text='''Mouth''')

if __name__ == '__main__':
    vp_start_gui()





